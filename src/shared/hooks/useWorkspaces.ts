import { useState, useEffect, useCallback, useRef } from 'react';
import { message } from 'antd';
import {
    createWorkspace,
    getWorkspaces,
    type Workspace,
    type CreateWorkspaceRequest,
    type WorkspaceListParams,
} from '@/entities/workspace';
import { ApiError } from '@/shared/api/api.types';

export const useWorkspaces = (initialParams: WorkspaceListParams = {}) => {
    const [workspaces, setWorkspaces] = useState<Workspace[]>([]);
    const [loading, setLoading] = useState(false);
    const [creating, setCreating] = useState(false);
    const [total, setTotal] = useState(0);
    const [params, setParams] = useState<WorkspaceListParams>({
        skip: 0,
        limit: 10,
        sort_by: 'updated_at',
        sort_desc: true,
        ...initialParams,
    });

    const mountedRef = useRef(true);
    const paramsRef = useRef(params);
    paramsRef.current = params;

    useEffect(() => {
        console.log('üîÑ useWorkspaces state changed:', {
            workspacesCount: workspaces.length,
            loading,
            creating,
            total
        });
    }, [workspaces, loading, creating, total]);

    const fetchWorkspaces = useCallback(async (newParams?: WorkspaceListParams) => {
        if (!mountedRef.current) {
            console.log('‚ö†Ô∏è fetchWorkspaces: Component unmounted, aborting');
            return;
        }

        console.log('üöÄ fetchWorkspaces: Starting request');
        setLoading(true);

        try {
            const currentParams = newParams || paramsRef.current;
            console.log('üì§ Fetching workspaces with params:', currentParams);

            const response = await getWorkspaces(currentParams);
            console.log('üì• API response:', response);

            if (!mountedRef.current) {
                console.log('‚ö†Ô∏è fetchWorkspaces: Component unmounted after API call');
                return;
            }

            if (response.success) {
                console.log('‚úÖ Setting workspaces:', response.data.items);
                console.log('‚úÖ Setting total:', response.data.total);

                setWorkspaces(response.data.items);
                setTotal(response.data.total);

                console.log('üìä Workspaces state updated:', {
                    itemsCount: response.data.items.length,
                    total: response.data.total
                });
            } else {
                console.log('‚ùå API returned success: false');
                message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤');
                setWorkspaces([]);
                setTotal(0);
            }
        } catch (error) {
            if (!mountedRef.current) {
                console.log('‚ö†Ô∏è fetchWorkspaces: Component unmounted in catch block');
                return;
            }

            console.error('‚ùå Error fetching workspaces:', error);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—à–∏–±–∫–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const apiError = error as ApiError;
            if (apiError?.status_code === 401) {
                console.log('üîê Unauthorized access - letting global handler manage');
                return;
            }

            setWorkspaces([]);
            setTotal(0);
            message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤');
        } finally {
            if (mountedRef.current) {
                console.log('üèÅ fetchWorkspaces: Setting loading to false');
                setLoading(false);
            } else {
                console.log('‚ö†Ô∏è fetchWorkspaces: Component unmounted in finally block');
            }
        }
    }, []);

    const createWorkspaceHandler = useCallback(async (data: CreateWorkspaceRequest): Promise<boolean> => {
        if (!mountedRef.current) return false;

        setCreating(true);
        try {
            const response = await createWorkspace(data);

            if (!mountedRef.current) return false;

            if (response.success) {
                message.success(response.message || '–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
                await fetchWorkspaces();
                return true;
            } else {
                message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
                return false;
            }
        } catch (error) {
            if (!mountedRef.current) return false;

            console.error('Error creating workspace:', error);

            const apiError = error as ApiError;
            if (apiError?.status_code === 401) {
                console.log('Unauthorized access during creation');
                return false;
            }

            message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
            return false;
        } finally {
            if (mountedRef.current) {
                setCreating(false);
            }
        }
    }, [fetchWorkspaces]);

    const updateParams = useCallback((newParams: Partial<WorkspaceListParams>) => {
        if (!mountedRef.current) return;

        const updatedParams = { ...paramsRef.current, ...newParams };
        setParams(updatedParams);
        fetchWorkspaces(updatedParams);
    }, [fetchWorkspaces]);

    const refresh = useCallback(() => {
        if (!mountedRef.current) return;
        fetchWorkspaces();
    }, [fetchWorkspaces]);

    // useEffect(() => {
    //     console.log('üéØ useWorkspaces: Initial mount');
    //     fetchWorkspaces();

    //     return () => {
    //         console.log('üßπ useWorkspaces: Cleanup');
    //         mountedRef.current = false;
    //     };
    // }, []); // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    return {
        workspaces,
        loading,
        creating,
        total,
        params,
        fetchWorkspaces,
        createWorkspace: createWorkspaceHandler,
        updateParams,
        refresh,
    };
};